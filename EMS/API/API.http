@API_HostAddress = http://localhost:5030

### Test public weather forecast (no auth required)
GET {{API_HostAddress}}/weatherforecast/public
Accept: application/json

###

### Test protected weather forecast (requires auth) - should return 401
GET {{API_HostAddress}}/weatherforecast/
Accept: application/json

###

### Register a new user
POST {{API_HostAddress}}/api/auth/register
Content-Type: application/json

{
  "firstName": "John",
  "lastName": "Doe",
  "firstNameFa": "جان",
  "lastNameFa": "دو",
  "userName": "johndoe",
  "password": "123",
  "confirmPassword": "123"
}

###

### Login with registered user
# @name loginUser
POST {{API_HostAddress}}/api/auth/login
Content-Type: application/json

{
  "userName": "johndoe",
  "password": "123",
  "rememberMe": false
}

###

### Extract token from login response
@authToken = {{loginUser.response.body.accessToken}}

### Test protected weather forecast with JWT token
GET {{API_HostAddress}}/weatherforecast/
Accept: application/json
Authorization: Bearer {{authToken}}

###

### Get current user info using JWT token
GET {{API_HostAddress}}/api/auth/me
Accept: application/json
Authorization: Bearer {{authToken}}

###

### Login with another user (example)
POST {{API_HostAddress}}/api/auth/login
Content-Type: application/json

{
  "userName": "anotherusername",
  "password": "123",
  "rememberMe": false
}

###

### Test refresh token (use actual tokens from login response)
POST {{API_HostAddress}}/api/auth/refresh-token
Content-Type: application/json

{
  "accessToken": "{{authToken}}",
  "refreshToken": "replace_with_actual_refresh_token_from_login_response"
}

###

### Logout (requires auth)
POST {{API_HostAddress}}/api/auth/logout
Authorization: Bearer {{authToken}}

###

### Test registration with duplicate username - should return error
POST {{API_HostAddress}}/api/auth/register
Content-Type: application/json

{
  "firstName": "Jane",
  "lastName": "Smith",
  "firstNameFa": "جین",
  "lastNameFa": "اسمیت",
  "userName": "johndoe",
  "password": "456",
  "confirmPassword": "456"
}

###

### Test login with invalid credentials - should return 401
POST {{API_HostAddress}}/api/auth/login
Content-Type: application/json

{
  "userName": "johndoe",
  "password": "WrongPassword",
  "rememberMe": false
}

###

### Update current user information
PUT {{API_HostAddress}}/api/auth/update-user
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "firstName": "John Updated",
  "lastName": "Doe Updated",
  "firstNameFa": "جان بروزرسانی شده",
  "lastNameFa": "دو بروزرسانی شده"
}

###

### Update another user's information (Admin only - will return 403 for regular users)
PUT {{API_HostAddress}}/api/auth/update-user/user_id_here
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "firstName": "Another User Updated",
  "lastName": "LastName Updated"
}

###

### Disable a user (Admin functionality)
POST {{API_HostAddress}}/api/auth/disable-user
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "userId": "user_id_to_disable_here",
  "disable": true,
  "reason": "User violated terms of service"
}

###

### Enable a user (Admin functionality) 
POST {{API_HostAddress}}/api/auth/disable-user
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "userId": "user_id_to_enable_here",
  "disable": false,
  "reason": "User issue has been resolved"
}

###