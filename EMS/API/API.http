@API_HostAddress_HTTP = http://localhost:5030
@API_HostAddress_HTTPS = https://localhost:7136
# Fixed development endpoints (HTTPS preferred). No dynamic port logic.

###
# EMS API Testing - SSL Certificate Configuration
# 
# ‚ö†Ô∏è  IMPORTANT: This API uses HTTPS redirection and self-signed certificates
# 
# üîß QUICK FIXES for SSL errors:
# 1. Use HTTPS endpoints instead of HTTP (preferred)
# 2. Set Development:DisableHttpsRedirection=true in appsettings.Development.json
# 3. Configure your HTTP client to trust self-signed certificates
# 4. Add certificates to system trust store using ./create-certificates.sh
#
# üìñ Detailed SSL setup instructions are in SSL-README.md
#
###

# SSL Certificate Configuration for HTTPS Requests
# 
# The HTTPS endpoint uses a self-signed certificate for development.
# If you encounter SSL handshake exceptions, you have these options:
#
# Option 1: Use the HTTP endpoint (will be redirected to HTTPS)
# Option 2: Configure your HTTP client to trust self-signed certificates
# Option 3: Add the certificate to your system's trusted certificates
#
# For VS Code REST Client, add this to your settings.json:
# "rest-client.certificates": {
#   "localhost:7136": {
#     "cert": "./certificates/api-cert.pem",
#     "key": "./certificates/api-key.pem"
#   }
# }
#
# Or disable SSL verification (NOT recommended for production):
# "rest-client.requestTimeout": 30000,
# "rest-client.previewOptions": "full",
# "rest-client.rejectUnauthorized": false





### Register a new user - HTTP
POST {{API_HostAddress_HTTP}}/api/auth/register
Content-Type: application/json

{
  "firstName": "John",
  "lastName": "Doe",
  "firstNameFa": "ÿ¨ÿßŸÜ",
  "lastNameFa": "ÿØŸà",
  "userName": "johndoe",
  "password": "123",
  "confirmPassword": "123"
}

###

### Register a new user - HTTPS
POST {{API_HostAddress_HTTPS}}/api/auth/register
Content-Type: application/json

{
  "firstName": "Jane",
  "lastName": "Smith",
  "firstNameFa": "ÿ¨€åŸÜ",
  "lastNameFa": "ÿßÿ≥ŸÖ€åÿ™",
  "userName": "janesmith",
  "password": "456",
  "confirmPassword": "456"
}

###

### Login with registered user - HTTP
# @name loginUserHTTP
# 
# TROUBLESHOOTING SSL ISSUES:
# If you get "PKIX path building failed" or SSL handshake exceptions:
#
# METHOD 1: Use HTTPS directly (recommended)
# Use the HTTPS endpoint below instead of HTTP
#
# METHOD 2: Disable HTTPS redirection temporarily
# Set "Development:DisableHttpsRedirection": true in appsettings.Development.json
# Then restart the API server
#
# METHOD 3: Configure VS Code REST Client to trust self-signed certificates
# Add to VS Code settings.json:
# {
#   "rest-client.certificates": {
#     "localhost:7136": {
#       "cert": "./certificates/api-cert.pem",
#       "key": "./certificates/api-key.pem"
#     }
#   }
# }
#
# METHOD 4: Disable SSL verification (UNSAFE - for testing only)
# Add to VS Code settings.json: "rest-client.rejectUnauthorized": false
#
POST {{API_HostAddress_HTTP}}/api/auth/login
Content-Type: application/json

{
  "userName": "mahmood2",
  "password": "12345",
  "rememberMe": true
}

###

### Login with registered user - HTTPS
# @name loginUserHTTPS
POST {{API_HostAddress_HTTPS}}/api/auth/login
Content-Type: application/json

{
  "userName": "mahmood2",
  "password": "12345",
  "rememberMe": true
}

###

### Extract tokens from login responses
@authTokenHTTP = {{loginUserHTTP.response.body.accessToken}}
@authTokenHTTPS = {{loginUserHTTPS.response.body.accessToken}}



### Get current user info using JWT token - HTTP
GET {{API_HostAddress_HTTP}}/api/auth/me
Accept: application/json
Authorization: Bearer {{authTokenHTTP}}

###

### Get current user info using JWT token - HTTPS
GET {{API_HostAddress_HTTPS}}/api/auth/me
Accept: application/json
Authorization: Bearer {{authTokenHTTPS}}

###

### Test refresh token - HTTP (use actual tokens from login response)
POST {{API_HostAddress_HTTP}}/api/auth/refresh-token
Content-Type: application/json

{
  "accessToken": "{{authTokenHTTP}}",
  "refreshToken": "replace_with_actual_refresh_token_from_login_response"
}

###

### Test refresh token - HTTPS (use actual tokens from login response)
POST {{API_HostAddress_HTTPS}}/api/auth/refresh-token
Content-Type: application/json

{
  "accessToken": "{{authTokenHTTPS}}",
  "refreshToken": "replace_with_actual_refresh_token_from_login_response"
}

###

### Logout - HTTP (requires auth)
POST {{API_HostAddress_HTTP}}/api/auth/logout
Authorization: Bearer {{authTokenHTTP}}

###

### Logout - HTTPS (requires auth)
POST {{API_HostAddress_HTTPS}}/api/auth/logout
Authorization: Bearer {{authTokenHTTPS}}

###

### Test registration with duplicate username - should return error - HTTP
POST {{API_HostAddress_HTTP}}/api/auth/register
Content-Type: application/json

{
  "firstName": "Jane",
  "lastName": "Smith",
  "firstNameFa": "ÿ¨€åŸÜ",
  "lastNameFa": "ÿßÿ≥ŸÖ€åÿ™",
  "userName": "johndoe",
  "password": "456",
  "confirmPassword": "456"
}

###

### Test login with invalid credentials - should return 401 - HTTP
POST {{API_HostAddress_HTTP}}/api/auth/login
Content-Type: application/json

{
  "userName": "johndoe",
  "password": "WrongPassword",
  "rememberMe": false
}

###

### Test login with invalid credentials - should return 401 - HTTPS
POST {{API_HostAddress_HTTPS}}/api/auth/login
Content-Type: application/json

{
  "userName": "janesmith",
  "password": "WrongPassword",
  "rememberMe": false
}

###

### Update current user information - HTTP
PUT {{API_HostAddress_HTTP}}/api/auth/update-user
Content-Type: application/json
Authorization: Bearer {{authTokenHTTP}}

{
  "firstName": "John Updated",
  "lastName": "Doe Updated",
  "firstNameFa": "ÿ¨ÿßŸÜ ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿ¥ÿØŸá",
  "lastNameFa": "ÿØŸà ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿ¥ÿØŸá"
}

###

### Update current user information - HTTPS
PUT {{API_HostAddress_HTTPS}}/api/auth/update-user
Content-Type: application/json
Authorization: Bearer {{authTokenHTTPS}}

{
  "firstName": "Jane Updated",
  "lastName": "Smith Updated",
  "firstNameFa": "ÿ¨€åŸÜ ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿ¥ÿØŸá",
  "lastNameFa": "ÿßÿ≥ŸÖ€åÿ™ ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿ¥ÿØŸá"
}

###

### Update another user's information (Admin only - will return 403 for regular users) - HTTP
PUT {{API_HostAddress_HTTP}}/api/auth/update-user/user_id_here
Content-Type: application/json
Authorization: Bearer {{authTokenHTTP}}

{
  "firstName": "Another User Updated",
  "lastName": "LastName Updated"
}

###

### Disable a user (Admin functionality) - HTTP
POST {{API_HostAddress_HTTP}}/api/auth/disable-user
Content-Type: application/json
Authorization: Bearer {{authTokenHTTP}}

{
  "userId": "user_id_to_disable_here",
  "disable": true,
  "reason": "User violated terms of service"
}

###

### Enable a user (Admin functionality) - HTTP
POST {{API_HostAddress_HTTP}}/api/auth/disable-user
Content-Type: application/json
Authorization: Bearer {{authTokenHTTP}}

{
  "userId": "user_id_to_enable_here",
  "disable": false,
  "reason": "User issue has been resolved"
}

###

#################################################################################
# MONITORING CONTROLLER - GROUPS ENDPOINTS
#################################################################################

### Get groups accessible to current user - HTTP
POST {{API_HostAddress_HTTP}}/api/monitoring/Groups
Content-Type: application/json
Authorization: Bearer {{authTokenHTTP}}

{
  "userId": null
}

###

### Get groups accessible to current user - HTTPS
POST {{API_HostAddress_HTTPS}}/api/monitoring/Groups
Content-Type: application/json
Authorization: Bearer {{authTokenHTTPS}}

{
  "userId": null
}

###

### Get groups for specific user (Admin only) - HTTP
POST {{API_HostAddress_HTTP}}/api/monitoring/Groups
Content-Type: application/json
Authorization: Bearer {{authTokenHTTP}}

{
  "userId": "01ca06c6-bac7-4488-9337-172ef636153b"
}

###

### Get groups for specific user (Admin only) - HTTPS
POST {{API_HostAddress_HTTPS}}/api/monitoring/Groups
Content-Type: application/json
Authorization: Bearer {{authTokenHTTPS}}

{
  "userId": "01ca06c6-bac7-4488-9337-172ef636153b"
}

###

### Add new group - HTTP
POST {{API_HostAddress_HTTP}}/api/monitoring/AddGroup
Content-Type: application/json
Authorization: Bearer {{authTokenHTTP}}

{
  "name": "Production Servers",
  "parentId": null
}

###

### Add new group - HTTPS
POST {{API_HostAddress_HTTPS}}/api/monitoring/AddGroup
Content-Type: application/json
Authorization: Bearer {{authTokenHTTPS}}

{
  "name": "Development Servers",
  "parentId": null
}

###

### Add new sub-group - HTTP
POST {{API_HostAddress_HTTP}}/api/monitoring/AddGroup
Content-Type: application/json
Authorization: Bearer {{authTokenHTTP}}

{
  "name": "Web Servers",
  "parentId": "replace_with_actual_parent_group_id"
}

###

### Add new sub-group - HTTPS
POST {{API_HostAddress_HTTPS}}/api/monitoring/AddGroup
Content-Type: application/json
Authorization: Bearer {{authTokenHTTPS}}

{
  "name": "Database Servers",
  "parentId": "replace_with_actual_parent_group_id"
}

###

### Edit existing group - HTTP
POST {{API_HostAddress_HTTP}}/api/monitoring/EditGroup
Content-Type: application/json
Authorization: Bearer {{authTokenHTTP}}

{
  "id": "replace_with_actual_group_id",
  "name": "Updated Group Name"
}

###

### Edit existing group - HTTPS
POST {{API_HostAddress_HTTPS}}/api/monitoring/EditGroup
Content-Type: application/json
Authorization: Bearer {{authTokenHTTPS}}

{
  "id": "replace_with_actual_group_id",
  "name": "Updated Group Name HTTPS"
}

###

### Delete group - HTTP
POST {{API_HostAddress_HTTP}}/api/monitoring/DeleteGroup
Content-Type: application/json
Authorization: Bearer {{authTokenHTTP}}

{
  "id": "replace_with_actual_group_id"
}

###

### Delete group - HTTPS
POST {{API_HostAddress_HTTPS}}/api/monitoring/DeleteGroup
Content-Type: application/json
Authorization: Bearer {{authTokenHTTPS}}

{
  "id": "replace_with_actual_group_id"
}

###